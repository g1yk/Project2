{"version":3,"sources":["components/Card.module.css","components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Titles","className","Component","Form","onSubmit","this","props","getWeather","type","name","placeholder","Weather","city","country","description","temperature","error","API_KEY","App","state","undefined","humidity","e","a","fahrenheit","message","console","log","preventDefault","target","elements","value","response","axios","get","then","setState","data","main","temp","toFixed","sys","weather","catch","finally","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oGACAA,EAAOC,QAAU,CAAC,KAAO,qB,mOCCJC,E,iLAEb,OACI,6BACI,wBAAIC,UAAU,0BAAd,kBACA,uBAAGA,UAAU,6BAAb,qD,GALoBC,aCAfC,E,iLAIb,OACI,0BAAMC,SAAUC,KAAKC,MAAMC,YACvB,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,YAC3C,2BAAOF,KAAK,OAAQC,KAAK,UAAUC,YAAY,eAC/C,mD,GARkBR,aC+BnBS,EA/BC,SAAAL,GAAK,OACpB,yBAAKL,UAAU,iBAEbK,EAAMM,MAAQN,EAAMO,SAAW,uBAAGZ,UAAU,gBAC3C,0BAAMA,UAAU,kBAAhB,IAAoCK,EAAMM,KAA1C,KAAoDN,EAAMO,UAK3DP,EAAMQ,aAAe,uBAAGb,UAAU,gBACjC,0BAAMA,UAAU,kBAAhB,IAAoCK,EAAMQ,YAA1C,MAKDR,EAAMS,aAAe,uBAAGd,UAAU,gBACjC,0BAAMA,UAAU,kBAAhB,IAAoCK,EAAMS,YAA1C,MAUDT,EAAMU,OAAS,uBAAGf,UAAU,kBAAmBK,EAAMU,S,iBCrBlDC,G,MAAU,oCAOKC,E,2MAKnBC,MAAQ,CACNJ,iBAAaK,EACbR,UAAMQ,EACNP,aAASO,EACTC,cAAUD,EACVN,iBAAaM,EACbJ,WAAOI,G,EAOTb,W,uCAAa,WAAOe,GAAP,mBAAAC,EAAA,gEAMGC,GACZ,IAEIC,EAFQD,EAEU,YADM,GADhBA,EACU,IAAU,EACa,SAC7CE,QAAQC,IAAIF,KATdH,EAAEM,iBAEEhB,EAAOU,EAAEO,OAAOC,SAASlB,KAAKmB,MAC9BlB,EAAUS,EAAEO,OAAOC,SAASjB,QAAQkB,MAiBpCnB,GAAQC,GACNmB,EAAWC,IAAMC,IAAN,2DAA8DtB,EAA9D,YAAsEC,EAAtE,kBAAuFI,EAAvF,kBACZkB,MAAK,SAACH,GACLN,QAAQC,IAAIK,GAEZ,EAAKI,SAAS,CACZrB,aAAwC,IAA1BiB,EAASK,KAAKC,KAAKC,KAAa,IAAIC,QAAQ,GAAK,IAC/D5B,KAAMoB,EAASK,KAAK5B,KACpBI,QAASmB,EAASK,KAAKI,IAAI5B,QAC3BQ,SAAUW,EAASK,KAAKC,KAAKjB,SAC7BP,YAAakB,EAASK,KAAKK,QAAQ,GAAG5B,YACtCE,MAAO,KAEN,WACDU,QAAQC,IAAI,EAAKR,aAKpBwB,OAAM,SAAU3B,GAEfU,QAAQC,IAAIX,MAEb4B,SAAQ,eAGXlB,QAAQC,IAAIK,IAEZ,EAAKI,SAAS,CACZrB,iBAAaK,EACbR,UAAMQ,EACNP,aAASO,EACTC,cAAUD,EACVN,iBAAaM,EACbJ,MAAO,2BAEN,WACDU,QAAQC,IAAI,EAAKR,UA1DV,2C,8HAiEX,OACE,6BACE,yBAAKlB,UAAU,WACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,yBACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,wBACb,kBAAC,EAAD,CAAMM,WAAYF,KAAKE,aACvB,kBAAC,EAAD,CACEQ,YAAaV,KAAKc,MAAMJ,YACxBM,SAAUhB,KAAKc,MAAME,SACrBT,KAAMP,KAAKc,MAAMP,KACjBC,QAASR,KAAKc,MAAMN,QACpBC,YAAaT,KAAKc,MAAML,YACxBE,MAAOX,KAAKc,MAAMH,kB,GApGLd,aCFb2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCNNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,kB","file":"static/js/main.17dfb7da.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Card\":\"Card_Card__1k9eP\"};","import React, { Component } from 'react'\n\nexport default class Titles extends Component {\n    render() {\n        return (\n            <div>\n                <h1 className=\"title-container__title\">Weather Finder</h1>\n                <p className=\"title-container__subtitle\">Find out temperature conditions and more ...</p>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\n\nexport default class Form extends Component {\n\n    \n    render() {\n        return (\n            <form onSubmit={this.props.getWeather}>\n                <input type=\"text\" name='city' placeholder=\"City...\"/>\n                <input type=\"text\"  name='country' placeholder=\"Country...\" />\n                <button>Get Weater</button>\n                \n            </form>\n        )\n    }\n}\n","import React from \"react\";\n\nconst Weather = props => (\n\t<div className=\"weather__info\">\n\t {\t\n\t \tprops.city && props.country && <p className=\"weather__key\">  \n\t \t\t<span className=\"weather__value\"> { props.city }, { props.country }</span>\n\t \t</p> \n\t }\n\n{ \t\n\t \tprops.description && <p className=\"weather__key\">\n\t \t\t<span className=\"weather__value\"> { props.description } </span>\n\t </p> \n\t }\n\n\t { \t\n\t \tprops.temperature && <p className=\"weather__key\">\n\t \t\t<span className=\"weather__value\"> { props.temperature }\t</span>\n\t \t</p> \n\t }\n\t {/* { \t\n\t \tprops.humidity && <p className=\"weather__key\"> Humidity: \n\t \t\t<span className=\"weather__value\"> { props.humidity } </span>\n\t \t</p> \n\t } */}\n\t\n\t { \n\t \tprops.error && <p className=\"weather__error\">{ props.error }</p>  \n\t }\n\t</div>\n);\n\nexport default Weather;","import React, { Component } from 'react';\nimport Titles from './components/Titles';\nimport Form from './components/Form';\nimport Weather from './components/Weather';\nimport axios from 'axios';\nimport Card from './components/Card';\n\nconst API_KEY = \"fe7dc6f5538ed939abf8ada8328338ef\"\n\n// axios.post('http://ironrest.herokuapp.com/vitalii', {age: 24}).then(res => {\n//   console.log(res.data)\n// })\n\n\nexport default class App extends Component {\n\n\n\n\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined,\n  };\n\n\n\n\n\n  getWeather = async (e) => {\n    e.preventDefault();\n\n    let city = e.target.elements.city.value;\n    let country = e.target.elements.country.value;\n\n    function fToC(fahrenheit) {\n      var fTemp = fahrenheit;\n      var fToCel = (fTemp - 32) * 5 / 9;\n      var message = fTemp + '\\xB0F is ' + fToCel + '\\xB0C.';\n      console.log(message);\n\n\n    }\n\n\n    // axios.post('http://ironrest.herokuapp.com/winningTransit/vitalii').then(res => {\n    //   console.log(res.data)\n    // })\n\n\n    if (city && country) {\n      let response = axios.get(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`)\n        .then((response) => {\n          console.log(response)\n\n          this.setState({\n            temperature: (response.data.main.temp * 1.8 + 32).toFixed(0) + \"F\",\n            city: response.data.name,\n            country: response.data.sys.country,\n            humidity: response.data.main.humidity,\n            description: response.data.weather[0].description,\n            error: '',\n\n          }, () => {\n            console.log(this.state)\n          }\n          )\n        })\n\n        .catch(function (error) {\n          // handle error\n          console.log(error);\n        })\n        .finally(function () {\n          // always executed\n        });\n      console.log(response)\n    } else {\n      this.setState({\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: 'Please enter the value',\n\n      }, () => {\n        console.log(this.state)\n      }\n      )\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"wrapper\">\n          <div className=\"main\">\n            <div className=\"container\">\n              <div className=\"row\">\n                <div className=\"col-5 title-container\">\n                  <Titles />\n                </div>\n                <div className=\"col-7 form-container\">\n                  <Form getWeather={this.getWeather} />\n                  <Weather \n                    temperature={this.state.temperature} \n                    humidity={this.state.humidity}\n                    city={this.state.city}\n                    country={this.state.country}\n                    description={this.state.description}\n                    error={this.state.error}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n};\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './App.css';\n\n\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}